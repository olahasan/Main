{"version":3,"sources":["Components/Header/Header.js","Components/MainPage/BookItem.js","Components/MainPage/Shelf.js","Components/SearchIcon/SearchIcon.js","Components/MainPage/Main.js","BooksAPI.js","Components/SearchPage/Search.js","App.js","index.js"],"names":["Header","className","BookItem","book","Update","Id","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","e","target","value","disabled","title","authors","Shelf","Name","All","map","id","SearchIcon","to","Main","filter","shelf","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Search","useState","query","setquery","setSearch","updateSearch","maxResults","fetch","method","body","JSON","stringify","then","res","json","data","books","BooksAPI","error","type","placeholder","updateQuery","c","defaultValue","App","setAll","GetAllBooks","a","getContacts","useEffect","updateBooks","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9c70d35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div>\r\n           <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nconst BookItem  = ({book , Update , Id  }) => {\r\n\r\n    // const shelfCase = All.filter((e)=>{\r\n    //     return(e.shelf === \"currentlyReading\")\r\n    // })\r\n\r\n    return(\r\n        // <div>\r\n\r\n        //  {shelfCase.map((e)=>(\r\n\r\n        //     <li key={Math.random()}>\r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                    <div\r\n                        className=\"book-cover\"\r\n                        style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage:\r\n                        // 'url(\"http://books.google.com/books/content?id=PGR2AwAAQBAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73-GnPVEyb7MOCxDzOYF1PTQRuf6nCss9LMNOSWBpxBrz8Pm2_mFtWMMg_Y1dx92HT7cUoQBeSWjs3oEztBVhUeDFQX6-tWlWz1-feexS0mlJPjotcwFqAg6hBYDXuK_bkyHD-y&source=gbs_api\")',\r\n                        // `url(${e.imageLinks.thumbnail})`\r\n                        `url(\"${book.imageLinks ? book.imageLinks.thumbnail : ''}\")`\r\n\r\n                        }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n\r\n                    <select  onChange={(e)=> Update(book , e.target.value)} value={Id}>\r\n\r\n                    {/* <select  defaultValue={e.shelf}  onChange={(c) => Update(e, c.target.value)} > */}\r\n\r\n                        <option value=\"none\" disabled>\r\n                            Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                            Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"book-title\">{book.title}</div>\r\n                    <div className=\"book-authors\">{book.authors}</div>\r\n                </div>\r\n        //     </li>\r\n\r\n        //   ))}\r\n\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default BookItem","import React from \"react\";\r\nimport BookItem from './BookItem'\r\n\r\nconst Shelf = ({Name , Id , All , Update }) => {\r\n    return (\r\n        // <div>\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{Name}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <ol className=\"books-grid\">\r\n                        \r\n                        {All.map(book=> \r\n                          <BookItem key={book.id} book={book} Update={Update} Id={Id}/>\r\n                        )}\r\n\r\n\r\n\r\n                   {/* {shelfCase.map((e)=>(\r\n                    <li key={Math.random()}>\r\n                    <div className=\"book\">\r\n                   <div className=\"book-top\">\r\n                   <div\r\n                       className=\"book-cover\"\r\n                       style={{\r\n                       width: 128,\r\n                       height: 193,\r\n                       backgroundImage:\r\n                       `url(${e.imageLinks.thumbnail})`    \r\n                   }}\r\n                   ></div>\r\n                   <div className=\"book-shelf-changer\">\r\n                     <select  defaultValue={e.shelf}  onChange={(c) => changeBookShelf(e, c.target.value)}>\r\n                       <option value=\"none\" disabled>\r\n                           Move to...\r\n                       </option>\r\n                       <option value=\"currentlyReading\">\r\n                           Currently Reading\r\n                       </option>\r\n                       <option value=\"wantToRead\">Want to Read</option>\r\n                       <option value=\"read\">Read</option>\r\n                       <option value=\"none\">None</option>\r\n                     </select>\r\n                   </div>\r\n                   </div>\r\n                   <div className=\"book-title\">{e.title}</div>\r\n                   <div className=\"book-authors\">{e.authors}</div>\r\n               </div>\r\n                    </li>\r\n                   ))}  */}\r\n                      \r\n                  </ol>\r\n                </div>\r\n              </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Shelf ","import React from \"react\";\r\n// we should inatall react-router-dom to be able to use Link  \r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchIcon = () => {\r\n    return(\r\n        <div>\r\n           <div className=\"open-search\">\r\n             {/* we use Link , instead of <a></a> and to , instead of href or onClick.\r\n                 to, take us to the pass .so we do not need onClick .\r\n                 and we do not want use href because we do not wanna any interact with servser\r\n                 */}\r\n            <Link to=\"/Search\">Add a book</Link>\r\n            {/* <a onClick={() => setShowSearchpage(!showSearchPage)}>Add a book</a> */}\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Do not forget export SearchIcon by using export default and import it in Main.js \r\nexport default SearchIcon","import React from \"react\";\r\n/*\r\n  - import all components which i want to appear on main page screen\r\n  - ./ refers to  too close to Main.js\r\n  - ../ refers to  far from  Main.js so we use ../ to go out from MainPage folder \r\n        and be inside in Components folder and then decide folder which\r\n         i need to open and choose the file from it\r\n*/\r\nimport Header from \"../Header/Header\"\r\n// import Currently from './CurrentlyBookShelf'\r\n// import Want from './WantBookShelf'\r\n// import Read from './ReadBookShelf'\r\nimport Shelf from './Shelf'\r\nimport SearchIcon from '../SearchIcon/SearchIcon'\r\n\r\n\r\n\r\n/* \r\n  - we will use function component instead of class based component  so we do not need Render()\r\n  - we can write  Main = (props)   or   Main = ({All , Update})\r\n  - if we write it like  Main = (props) we receive props like this All={props.All}\r\n  - but if write it like  Main = ({All , Update}) we receive props like this All={All}\r\n*/\r\n// we receive props here from App\r\nconst Main = ({All , Update}) => {\r\n\r\n    return(\r\n      <div>\r\n        <div className=\"list-books\">\r\n          <Header />\r\n\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n               {/* we pass all props which we received them from app\r\n                to each component(if required) as props\r\n                to receive them on each page separately\r\n                but we can avoid that (transmission from father to child to child to child) \r\n                by using redux or usecontext */}\r\n\r\n              {/* <Currently  All={All} Update={Update}/>\r\n                  <Want  All={All} Update={Update}/>\r\n                  <Read  All={All} Update={Update}/> */}\r\n\r\n\r\n              <Shelf Name='Currently Reading' Id='currentlyReading'  All={All.filter((book)=>book.shelf === 'currentlyReading')}   Update={Update}/>\r\n              <Shelf Name='Want to Read'      Id='wantToRead'        All={All.filter((book)=>book.shelf === 'wantToRead')}         Update={Update}/>\r\n              <Shelf Name='Read'              Id='read'              All={All.filter((book)=>book.shelf === 'read')}               Update={Update}/>\r\n            \r\n            </div>\r\n          </div>\r\n\r\n          <SearchIcon />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\n// Do not forget export Main by using export default and import it in App.js \r\nexport default Main","const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React from \"react\";\r\n// we should inatall react-router-dom to be able to use Link\r\nimport { Link } from \"react-router-dom\";\r\n// in our project we will use Hooks so we need to use useState instead of state  \r\nimport { useState } from \"react\";\r\n/* allow us to access each item in the BooksAPI and we should import it before using it\r\n  ../ refers to  far from  BookApi.so we use ../ to go out from SearchPage folder\r\n      now we are in Components folder.so we use ../ to go out from Components folder\r\n      now we are in src folder.\r\n   ./ choose any file. what you want from src folder    \r\n\r\n   1= ../ get out from SearchPage folder\r\n   2= ../ get out from Components folder\r\n   3= ./ get into src folder\r\n   4= chooce the file\r\n*/\r\nimport BookItem from  '../MainPage/BookItem'\r\nimport * as BooksAPI from '../.././BooksAPI'\r\n\r\n\r\n\r\n/* \r\n  - we will use function component instead of class based component  so we do not need Render()\r\n  - we can write  Main = (props)   or   Main = ({All , Update})\r\n  - if we write it like  Main = (props) we receive props like this All={props.All}\r\n  - but if write it like  Main = ({All , Update}) we receive props like this All={All}\r\n*/\r\n// we receive props here from App\r\nconst Search = ({All , Update }) => {\r\n\r\n    // we will use setstate create a state 'query' with initial value an empty string\r\n    const [query , setquery]  = useState('')\r\n    // we will use setstate create a state 'Search' with initial value an empty array\r\n    const [Search , setSearch]  = useState([])\r\n\r\n    // we create an arrow function which is take a query and update it und call updateSearch function\r\n    const updateQuery = (query) => {\r\n        setquery(query)\r\n        updateSearch(query)\r\n    }\r\n    \r\n    //we create an updateSearch function takes query and if it true, return books from api. if else, set the state with [] \r\n    const updateSearch = (query) => {\r\n        if (query) {\r\n            BooksAPI.search(query).then((Search) => {\r\n                setSearch(Search.error ? [] : Search)\r\n            }) \r\n        } else {\r\n            setSearch([])\r\n        }\r\n\r\n        // query ? (\r\n        //     BooksAPI.search(query).then((Search) => {\r\n        //         setSearch(Search.error ? [] : Search)\r\n        //     })\r\n        // ) : (setSearch([]))\r\n    }\r\n\r\n    return(\r\n        // <div>\r\n            <div className=\"search-books\">\r\n                    <div className=\"search-books-bar\">\r\n                        {/* we use Link, instead of <a></a> and to, instead of href or onClick.\r\n                            to, take us to the pass. so we do not need onClick .\r\n                            and we do not want use href because we do not wanna any interact with servser\r\n                            / refers to home/main page\r\n                            */}\r\n                        <Link to=\"/\" className=\"close-search\">Close</Link>\r\n                        {/* <a\r\n                        className=\"close-search\"\r\n                        onClick={() => setShowSearchpage(!showSearchPage)}\r\n                        >\r\n                        Close\r\n                        </a> */}\r\n                        <div className=\"search-books-input-wrapper\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search by title, author, or ISBN\"\r\n                                // value always = the state\r\n                                value={query}\r\n                                //on change create a function which run updateQuery . \r\n                                // instead of query let it take the value for the element\r\n                                onChange={(e) => updateQuery(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"search-books-results\">\r\n                        <ol className=\"books-grid\">\r\n                            {/* we loop on the search array  */}\r\n                            {Search.map(c => {\r\n                                \r\n                                // make all book in default value = none\r\n                                // and when we chage it .it will change to = the value which we have chosen\r\n                                let defaultValue = 'none';\r\n     \r\n                                /*\r\n                                   we loop on all books\r\n                                   if id of book = id of book that we search for .return it with default value = the name of shef .else, skip\r\n                                 */\r\n                                All.map(e => (\r\n                                    e.id === c.id ? (defaultValue = e.shelf) : ''\r\n                                ))\r\n\r\n                                return (\r\n                                    // every list should have a unique key \r\n                                    // <li key={Math.random()}>\r\n                                    //         <div className=\"book\">\r\n                                    //             <div className=\"book-top\">\r\n                                    //             <div\r\n                                    //                 className=\"book-cover\"\r\n                                    //                 style={{\r\n                                    //                 width: 128,\r\n                                    //                 height: 193,\r\n                                    //                 backgroundImage:\r\n                                    //                 //we take the thumbnail from Search.imageLinks to be dynamic value\r\n                                    //                 `url(\"${Search.imageLinks ? Search.imageLinks.thumbnail : ''}\")`    \r\n                                    //             }}\r\n                                    //             ></div>\r\n                                    //             <div className=\"book-shelf-changer\">\r\n                                    //                 {/* on change,call update function and put value = defaultValue which was none and now we update it to = (e.shelf) */}\r\n                                    //                 <select  onChange={(c) => Update(Search, c.target.value)} value={defaultValue} >\r\n                                    //                 <option value=\"none\" disabled>\r\n                                    //                     Move to...\r\n                                    //                 </option>\r\n                                    //                 <option value=\"currentlyReading\">\r\n                                    //                     Currently Reading\r\n                                    //                 </option>\r\n                                    //                 <option value=\"wantToRead\">Want to Read</option>\r\n                                    //                 <option value=\"read\">Read</option>\r\n                                    //                 <option value=\"none\">None</option>\r\n                                    //                 </select>\r\n                                    //             </div>\r\n                                    //             </div>\r\n                                    //                {/* loop on every search array'elemnt and take the title/ authors to be dynamic not static data */}\r\n                                    //             <div className=\"book-title\">{Search.title}</div>\r\n                                    //             <div className=\"book-authors\">{Search.authors}</div>\r\n                                    //         </div>\r\n                                    // </li>\r\n\r\n                                    <li key={c.id}>\r\n                                        <BookItem book={c} Update={Update} Id={defaultValue}/>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ol>\r\n                    </div>\r\n            </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\n// Do not forget export Search by using export default and import it in App.js \r\nexport default Search","import \"./App.css\";\n// when we import Main/Search file we do not need write {Main} or {Search} because it came from export default  not export and './' refers to SRC folder\nimport Main from './Components/MainPage/Main'\nimport Search from './Components/SearchPage/Search'\n/* \nto use { Route , Routes } you should firstly write in terminal npm install react-router-dom \nthen import them from \"react-router-dom\" .\n-we use Routes to work as a parent for every single Route \n-Route is refers to a child and every Route should be wrapped in Routes\n*/\nimport { Route , Routes } from \"react-router-dom\";\n// in our project we will use Hooks so we need to use useState instead of state  and useEffect instead of ComponentDidMount or all lifeCycle\nimport { useState , useEffect } from \"react\";\n// * allow us to access each item in the BooksAPI and we should import it before using it\nimport * as BooksAPI from './BooksAPI'\n\n\n/* \nwe will use function component instead of class based component\nand using hooks will help us to use state an lifecycle inside function component\nbut in the form of useState and useEffect\n*/\nconst App = () => {\n\n  // we will use setstate create a state 'All' with initial value an empty array\n   const [All , setAll]  = useState([])\n\n\n// Get \n  /*\n    - we will create a function and get the data inside it using a way from many ways\n      (async/await) - (then/catch) - (fetch) ...\n    - we will update state using setAll  and instead of empty array it will equel res \n    -do not forget to call the function at the end \n  */\nconst GetAllBooks =() => {\n      const getContacts = async () => {\n      const res = await BooksAPI.getAll();\n      setAll(res);\n    }\n    getContacts()\n\n  // BooksAPI.getAll().then((res) => {\n  //   setAll( res );\n  // });\n}\n\n  /*\n    - i wanna say after the component render and every thing is okay \n      then call the function which we create it in line  36  \n    - if we were using class based componet that will be ComponentDidMount/lifecycle\n    - but now in function component and with Hooks it called useEffect\n    - we should use empty array to prevent infinite loop\n  */\nuseEffect(()=>{\n  GetAllBooks()\n},[])\n\n\n\n // Update \n    // - i will update the data which i got it in line 36 using BooksAPI.update for update \n const Update = (book, shelf) => {\n  BooksAPI.update(book, shelf).then(updateBooks => {\n    GetAllBooks();\n  })\n }\n\n  // we do not need to write a render() because it is a function component\n  return (\n    /*\n      - because we write a jsx we should wrap  all elements inside one parent\n      - before using Routes and Route we should wrap App.js in BrowserRourer which is in index.js file\n      - path=\"/\" refers to home  and path=\"/Search\" refers to search component\n      - element refers to component which will appear on screen when the path match with its url\n      -inside every component should i pass state and books after updated(Update) as props and i will receive it inside component page\n      */\n    <div className=\"app\">\n      <Routes>\n        <Route path=\"/\" element={<Main All={All}  Update={Update}/>} />\n        <Route path=\"/Search\" element={<Search  All={All} Update={Update}/>} />\n      </Routes>\n    </div>\n  );\n}\n\n\n\n\n// Do not forget export App by using export default \n// and import it in index.js inside root element\nexport default App \n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n/*\nwe should install react-router-dom in terminal \nand then import BrowserRouter befor use <BrowserRouter><BrowserRouter/>\nor BrowserRouter as Router but in this case we will use Router <Router><Router/>\n*/\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  // wrapp App component inside BrowserRouter\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}