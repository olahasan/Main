{"ast":null,"code":"import _slicedToArray from\"C:/Users/olaal/Desktop/reader-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";// we should inatall react-router-dom to be able to use Link\nimport{Link}from\"react-router-dom\";// in our project we will use Hooks so we need to use useState instead of state  \nimport{useState}from\"react\";/* allow us to access each item in the BooksAPI and we should import it before using it\r\n  ../ refers to  far from  BookApi.so we use ../ to go out from SearchPage folder\r\n      now we are in Components folder.so we use ../ to go out from Components folder\r\n      now we are in src folder.\r\n   ./ choose any file. what you want from src folder    \r\n\r\n   1= ../ get out from SearchPage folder\r\n   2= ../ get out from Components folder\r\n   3= ./ get into src folder\r\n   4= chooce the file\r\n*/import BookItem from'../MainPage/BookItem';import*as BooksAPI from'../.././BooksAPI';/* \r\n  - we will use function component instead of class based component  so we do not need Render()\r\n  - we can write  Main = (props)   or   Main = ({All , Update})\r\n  - if we write it like  Main = (props) we receive props like this All={props.All}\r\n  - but if write it like  Main = ({All , Update}) we receive props like this All={All}\r\n*/ // we receive props here from App\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Search=function Search(_ref){var All=_ref.All,Update=_ref.Update;// we will use setstate create a state 'query' with initial value an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),query=_useState2[0],setquery=_useState2[1];// we will use setstate create a state 'Search' with initial value an empty array\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),Search=_useState4[0],setSearch=_useState4[1];// we create an arrow function which is take a query and update it und call updateSearch function\nvar updateQuery=function updateQuery(query){setquery(query);updateSearch(query);};//we create an updateSearch function takes query and if it true, return books from api. if else, set the state with [] \nvar updateSearch=function updateSearch(query){if(query){BooksAPI.search(query).then(function(Search){setSearch(Search.error?[]:Search);});}else{setSearch([]);}// query ? (\n//     BooksAPI.search(query).then((Search) => {\n//         setSearch(Search.error ? [] : Search)\n//     })\n// ) : (setSearch([]))\n};return/*#__PURE__*/ (// <div>\n_jsxs(\"div\",{className:\"search-books\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-books-bar\",children:[/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"close-search\",children:\"Close\"}),/*#__PURE__*/_jsx(\"div\",{className:\"search-books-input-wrapper\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search by title, author, or ISBN\"// value always = the state\n,value:query//on change create a function which run updateQuery . \n// instead of query let it take the value for the element\n,onChange:function onChange(e){return updateQuery(e.target.value);}})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-books-results\",children:/*#__PURE__*/_jsx(\"ol\",{className:\"books-grid\",children:Search.map(function(c){// make all book in default value = none\n// and when we chage it .it will change to = the value which we have chosen\nvar defaultValue='none';/*\r\n                                   we loop on all books\r\n                                   if id of book = id of book that we search for .return it with default value = the name of shef .else, skip\r\n                                 */All.map(function(e){return e.id===c.id?defaultValue=e.shelf:'';});return/*#__PURE__*/ (// every list should have a unique key \n// <li key={Math.random()}>\n//         <div className=\"book\">\n//             <div className=\"book-top\">\n//             <div\n//                 className=\"book-cover\"\n//                 style={{\n//                 width: 128,\n//                 height: 193,\n//                 backgroundImage:\n//                 //we take the thumbnail from Search.imageLinks to be dynamic value\n//                 `url(\"${Search.imageLinks ? Search.imageLinks.thumbnail : ''}\")`    \n//             }}\n//             ></div>\n//             <div className=\"book-shelf-changer\">\n//                 {/* on change,call update function and put value = defaultValue which was none and now we update it to = (e.shelf) */}\n//                 <select  onChange={(c) => Update(Search, c.target.value)} value={defaultValue} >\n//                 <option value=\"none\" disabled>\n//                     Move to...\n//                 </option>\n//                 <option value=\"currentlyReading\">\n//                     Currently Reading\n//                 </option>\n//                 <option value=\"wantToRead\">Want to Read</option>\n//                 <option value=\"read\">Read</option>\n//                 <option value=\"none\">None</option>\n//                 </select>\n//             </div>\n//             </div>\n//                {/* loop on every search array'elemnt and take the title/ authors to be dynamic not static data */}\n//             <div className=\"book-title\">{Search.title}</div>\n//             <div className=\"book-authors\">{Search.authors}</div>\n//         </div>\n// </li>\n_jsx(\"li\",{children:/*#__PURE__*/_jsx(BookItem,{book:c,Update:Update,Id:defaultValue})},c.id));})})})]})// </div>\n);};// Do not forget export Search by using export default and import it in App.js \nexport default Search;","map":{"version":3,"sources":["C:/Users/olaal/Desktop/reader-app/src/Components/SearchPage/Search.js"],"names":["React","Link","useState","BookItem","BooksAPI","Search","All","Update","query","setquery","setSearch","updateQuery","updateSearch","search","then","error","e","target","value","map","c","defaultValue","id","shelf"],"mappings":"wJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA,OAASC,IAAT,KAAqB,kBAArB,CACA;AACA,OAASC,QAAT,KAAyB,OAAzB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,MAAOC,CAAAA,QAAP,KAAsB,sBAAtB,CACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,kBAA1B,CAIA;AACA;AACA;AACA;AACA;AACA,E,CACA;wFACA,GAAMC,CAAAA,MAAM,CAAG,qBAAqB,IAAnBC,CAAAA,GAAmB,MAAnBA,GAAmB,CAAbC,MAAa,MAAbA,MAAa,CAEhC;AAFgC,cAGJL,QAAQ,CAAC,EAAD,CAHJ,wCAGzBM,KAHyB,eAGjBC,QAHiB,eAIhC;AAJgC,eAKFP,QAAQ,CAAC,EAAD,CALN,yCAKzBG,MALyB,eAKhBK,SALgB,eAOhC;AACA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACH,KAAD,CAAW,CAC3BC,QAAQ,CAACD,KAAD,CAAR,CACAI,YAAY,CAACJ,KAAD,CAAZ,CACH,CAHD,CAKA;AACA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACJ,KAAD,CAAW,CAC5B,GAAIA,KAAJ,CAAW,CACPJ,QAAQ,CAACS,MAAT,CAAgBL,KAAhB,EAAuBM,IAAvB,CAA4B,SAACT,MAAD,CAAY,CACpCK,SAAS,CAACL,MAAM,CAACU,KAAP,CAAe,EAAf,CAAoBV,MAArB,CAAT,CACH,CAFD,EAGH,CAJD,IAIO,CACHK,SAAS,CAAC,EAAD,CAAT,CACH,CAED;AACA;AACA;AACA;AACA;AACH,CAdD,CAgBA,oBACI;AACI,aAAK,SAAS,CAAC,cAAf,wBACQ,aAAK,SAAS,CAAC,kBAAf,wBAMI,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,SAAS,CAAC,cAAvB,mBANJ,cAaI,YAAK,SAAS,CAAC,4BAAf,uBACI,cACI,IAAI,CAAC,MADT,CAEI,WAAW,CAAC,kCACZ;AAHJ,CAII,KAAK,CAAEF,KACP;AACA;AANJ,CAOI,QAAQ,CAAE,kBAACQ,CAAD,QAAOL,CAAAA,WAAW,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB,EAPd,EADJ,EAbJ,GADR,cA0BQ,YAAK,SAAS,CAAC,sBAAf,uBACI,WAAI,SAAS,CAAC,YAAd,UAEKb,MAAM,CAACc,GAAP,CAAW,SAAAC,CAAC,CAAI,CAEb;AACA;AACA,GAAIC,CAAAA,YAAY,CAAG,MAAnB,CAEA;AAChC;AACA;AACA,mCACgCf,GAAG,CAACa,GAAJ,CAAQ,SAAAH,CAAC,QACLA,CAAAA,CAAC,CAACM,EAAF,GAASF,CAAC,CAACE,EAAX,CAAiBD,YAAY,CAAGL,CAAC,CAACO,KAAlC,CAA2C,EADtC,EAAT,EAIA,oBACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iCACI,KAAC,QAAD,EAAU,IAAI,CAAEH,CAAhB,CAAmB,MAAM,CAAEb,MAA3B,CAAmC,EAAE,CAAEc,YAAvC,EADJ,EAASD,CAAC,CAACE,EAAX,CApCJ,EAwCH,CAtDA,CAFL,EADJ,EA1BR,GAuFJ;AAzFJ,EA2FH,CAzHD,CA2HA;AACA,cAAejB,CAAAA,MAAf","sourcesContent":["import React from \"react\";\r\n// we should inatall react-router-dom to be able to use Link\r\nimport { Link } from \"react-router-dom\";\r\n// in our project we will use Hooks so we need to use useState instead of state  \r\nimport { useState } from \"react\";\r\n/* allow us to access each item in the BooksAPI and we should import it before using it\r\n  ../ refers to  far from  BookApi.so we use ../ to go out from SearchPage folder\r\n      now we are in Components folder.so we use ../ to go out from Components folder\r\n      now we are in src folder.\r\n   ./ choose any file. what you want from src folder    \r\n\r\n   1= ../ get out from SearchPage folder\r\n   2= ../ get out from Components folder\r\n   3= ./ get into src folder\r\n   4= chooce the file\r\n*/\r\nimport BookItem from  '../MainPage/BookItem'\r\nimport * as BooksAPI from '../.././BooksAPI'\r\n\r\n\r\n\r\n/* \r\n  - we will use function component instead of class based component  so we do not need Render()\r\n  - we can write  Main = (props)   or   Main = ({All , Update})\r\n  - if we write it like  Main = (props) we receive props like this All={props.All}\r\n  - but if write it like  Main = ({All , Update}) we receive props like this All={All}\r\n*/\r\n// we receive props here from App\r\nconst Search = ({All , Update }) => {\r\n\r\n    // we will use setstate create a state 'query' with initial value an empty string\r\n    const [query , setquery]  = useState('')\r\n    // we will use setstate create a state 'Search' with initial value an empty array\r\n    const [Search , setSearch]  = useState([])\r\n\r\n    // we create an arrow function which is take a query and update it und call updateSearch function\r\n    const updateQuery = (query) => {\r\n        setquery(query)\r\n        updateSearch(query)\r\n    }\r\n    \r\n    //we create an updateSearch function takes query and if it true, return books from api. if else, set the state with [] \r\n    const updateSearch = (query) => {\r\n        if (query) {\r\n            BooksAPI.search(query).then((Search) => {\r\n                setSearch(Search.error ? [] : Search)\r\n            }) \r\n        } else {\r\n            setSearch([])\r\n        }\r\n\r\n        // query ? (\r\n        //     BooksAPI.search(query).then((Search) => {\r\n        //         setSearch(Search.error ? [] : Search)\r\n        //     })\r\n        // ) : (setSearch([]))\r\n    }\r\n\r\n    return(\r\n        // <div>\r\n            <div className=\"search-books\">\r\n                    <div className=\"search-books-bar\">\r\n                        {/* we use Link, instead of <a></a> and to, instead of href or onClick.\r\n                            to, take us to the pass. so we do not need onClick .\r\n                            and we do not want use href because we do not wanna any interact with servser\r\n                            / refers to home/main page\r\n                            */}\r\n                        <Link to=\"/\" className=\"close-search\">Close</Link>\r\n                        {/* <a\r\n                        className=\"close-search\"\r\n                        onClick={() => setShowSearchpage(!showSearchPage)}\r\n                        >\r\n                        Close\r\n                        </a> */}\r\n                        <div className=\"search-books-input-wrapper\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search by title, author, or ISBN\"\r\n                                // value always = the state\r\n                                value={query}\r\n                                //on change create a function which run updateQuery . \r\n                                // instead of query let it take the value for the element\r\n                                onChange={(e) => updateQuery(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"search-books-results\">\r\n                        <ol className=\"books-grid\">\r\n                            {/* we loop on the search array  */}\r\n                            {Search.map(c => {\r\n                                \r\n                                // make all book in default value = none\r\n                                // and when we chage it .it will change to = the value which we have chosen\r\n                                let defaultValue = 'none';\r\n     \r\n                                /*\r\n                                   we loop on all books\r\n                                   if id of book = id of book that we search for .return it with default value = the name of shef .else, skip\r\n                                 */\r\n                                All.map(e => (\r\n                                    e.id === c.id ? (defaultValue = e.shelf) : ''\r\n                                ))\r\n\r\n                                return (\r\n                                    // every list should have a unique key \r\n                                    // <li key={Math.random()}>\r\n                                    //         <div className=\"book\">\r\n                                    //             <div className=\"book-top\">\r\n                                    //             <div\r\n                                    //                 className=\"book-cover\"\r\n                                    //                 style={{\r\n                                    //                 width: 128,\r\n                                    //                 height: 193,\r\n                                    //                 backgroundImage:\r\n                                    //                 //we take the thumbnail from Search.imageLinks to be dynamic value\r\n                                    //                 `url(\"${Search.imageLinks ? Search.imageLinks.thumbnail : ''}\")`    \r\n                                    //             }}\r\n                                    //             ></div>\r\n                                    //             <div className=\"book-shelf-changer\">\r\n                                    //                 {/* on change,call update function and put value = defaultValue which was none and now we update it to = (e.shelf) */}\r\n                                    //                 <select  onChange={(c) => Update(Search, c.target.value)} value={defaultValue} >\r\n                                    //                 <option value=\"none\" disabled>\r\n                                    //                     Move to...\r\n                                    //                 </option>\r\n                                    //                 <option value=\"currentlyReading\">\r\n                                    //                     Currently Reading\r\n                                    //                 </option>\r\n                                    //                 <option value=\"wantToRead\">Want to Read</option>\r\n                                    //                 <option value=\"read\">Read</option>\r\n                                    //                 <option value=\"none\">None</option>\r\n                                    //                 </select>\r\n                                    //             </div>\r\n                                    //             </div>\r\n                                    //                {/* loop on every search array'elemnt and take the title/ authors to be dynamic not static data */}\r\n                                    //             <div className=\"book-title\">{Search.title}</div>\r\n                                    //             <div className=\"book-authors\">{Search.authors}</div>\r\n                                    //         </div>\r\n                                    // </li>\r\n\r\n                                    <li key={c.id}>\r\n                                        <BookItem book={c} Update={Update} Id={defaultValue}/>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ol>\r\n                    </div>\r\n            </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\n// Do not forget export Search by using export default and import it in App.js \r\nexport default Search"]},"metadata":{},"sourceType":"module"}