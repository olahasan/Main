{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olaal\\\\Desktop\\\\ppp_-_Copy_-_Copy__2_\\\\ppp - Copy - Copy\\\\nd0191-c1-myreads-main\\\\nd0191-c1-myreads-main\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\"; // when we import Main/Search file we do not need write {Main} or {Search} because it came from export default  not export and './' refers to SRC folder\n\nimport Main from './Components/MainPage/Main';\nimport Search from './Components/SearchPage/Search';\n/* \nto use { Route , Routes } you should firstly write in terminal npm install react-router-dom \nthen import them from \"react-router-dom\" .\n-we use Routes to work as a parent for every single Route \n-Route is refers to a child and every Route should be wrapped in Routes\n*/\n\nimport { Route, Routes } from \"react-router-dom\"; // in our project we will use Hooks so we need to use useState instead of state  and useEffect instead of ComponentDidMount or all lifeCycle\n\nimport { useState, useEffect } from \"react\"; // * allow us to access each item in the BooksAPI and we should import it before using it\n\nimport * as BooksAPI from './BooksAPI';\n/* \nwe will use function component instead of class based component\nand using hooks will help us to use state an lifecycle inside function component\nbut in the form of useState and useEffect\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // we will use setstate create a state 'All' with initial value an empty array\n  const [All, setAll] = useState([]); // Get \n\n  /*\n    - we will create a function and get the data inside it using a way from many ways\n      (async/await) - (then/catch) - (fetch) ...\n    - we will update state using setAll  and instead of empty array it will equel res \n    -do not forget to call the function at the end \n  */\n\n  const GetAllBooks = () => {\n    const getContacts = async () => {\n      const res = await BooksAPI.getAll();\n      setAll(res);\n    };\n\n    getContacts(); // BooksAPI.getAll().then((res) => {\n    //   setAll( res );\n    // });\n  };\n  /*\n    - i wanna say after the component render and every thing is okay \n      then call the function which we create it in line  36  \n    - if we were using class based componet that will be ComponentDidMount/lifecycle\n    - but now in function component and with Hooks it called useEffect\n    - we should use empty array to prevent infinite loop\n  */\n\n\n  useEffect(() => {\n    GetAllBooks();\n  }, []); // Update \n  // - i will update the data which i got it in line 36 using BooksAPI.update for update \n\n  const Update = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(updateBooks => {\n      GetAllBooks();\n    });\n  }; // we do not need to write a render() because it is a function component\n\n\n  return (\n    /*#__PURE__*/\n\n    /*\n      - because we write a jsx we should wrap  all elements inside one parent\n      - before using Routes and Route we should wrap App.js in BrowserRourer which is in index.js file\n      - path=\"/\" refers to home  and path=\"/Search\" refers to search component\n      - element refers to component which will appear on screen when the path match with its url\n      -inside every component should i pass state and books after updated(Update) as props and i will receive it inside component page\n      */\n    _jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Main, {\n            All: All,\n            Update: Update\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Search\",\n          element: /*#__PURE__*/_jsxDEV(Search, {\n            All: All,\n            Update: Update\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  );\n}; // Do not forget export App by using export default \n// and import it in index.js inside root element\n\n\n_s(App, \"yU2Cyt3UnaijKLcthgk6w+fIsBA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/olaal/Desktop/ppp_-_Copy_-_Copy__2_/ppp - Copy - Copy/nd0191-c1-myreads-main/nd0191-c1-myreads-main/starter/src/App.js"],"names":["Main","Search","Route","Routes","useState","useEffect","BooksAPI","App","All","setAll","GetAllBooks","getContacts","res","getAll","Update","book","shelf","update","then","updateBooks"],"mappings":";;;AAAA,OAAO,WAAP,C,CACA;;AACA,OAAOA,IAAP,MAAiB,4BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,EAAiBC,MAAjB,QAA+B,kBAA/B,C,CACA;;AACA,SAASC,QAAT,EAAoBC,SAApB,QAAqC,OAArC,C,CACA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AAGA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB;AACC,QAAM,CAACC,GAAD,EAAOC,MAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC,CAHe,CAMlB;;AACE;AACF;AACA;AACA;AACA;AACA;;AACA,QAAMM,WAAW,GAAE,MAAM;AACnB,UAAMC,WAAW,GAAG,YAAY;AAChC,YAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,MAAT,EAAlB;AACAJ,MAAAA,MAAM,CAACG,GAAD,CAAN;AACD,KAHC;;AAIFD,IAAAA,WAAW,GALU,CAOvB;AACA;AACA;AACD,GAVD;AAYE;AACF;AACA;AACA;AACA;AACA;AACA;;;AACAN,EAAAA,SAAS,CAAC,MAAI;AACZK,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT,CAhCkB,CAsCjB;AACG;;AACH,QAAMI,MAAM,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/BV,IAAAA,QAAQ,CAACW,MAAT,CAAgBF,IAAhB,EAAsBC,KAAtB,EAA6BE,IAA7B,CAAkCC,WAAW,IAAI;AAC/CT,MAAAA,WAAW;AACZ,KAFD;AAGA,GAJD,CAxCiB,CA8ChB;;;AACA;AAAA;;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,IAAD;AAAM,YAAA,GAAG,EAAEF,GAAX;AAAiB,YAAA,MAAM,EAAEM;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAsB,UAAA,OAAO,eAAE,QAAC,MAAD;AAAS,YAAA,GAAG,EAAEN,GAAd;AAAmB,YAAA,MAAM,EAAEM;AAA3B;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AARF;AAeD,CA9DD,C,CAmEA;AACA;;;GApEMP,G;;KAAAA,G;AAqEN,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\n// when we import Main/Search file we do not need write {Main} or {Search} because it came from export default  not export and './' refers to SRC folder\nimport Main from './Components/MainPage/Main'\nimport Search from './Components/SearchPage/Search'\n/* \nto use { Route , Routes } you should firstly write in terminal npm install react-router-dom \nthen import them from \"react-router-dom\" .\n-we use Routes to work as a parent for every single Route \n-Route is refers to a child and every Route should be wrapped in Routes\n*/\nimport { Route , Routes } from \"react-router-dom\";\n// in our project we will use Hooks so we need to use useState instead of state  and useEffect instead of ComponentDidMount or all lifeCycle\nimport { useState , useEffect } from \"react\";\n// * allow us to access each item in the BooksAPI and we should import it before using it\nimport * as BooksAPI from './BooksAPI'\n\n\n/* \nwe will use function component instead of class based component\nand using hooks will help us to use state an lifecycle inside function component\nbut in the form of useState and useEffect\n*/\nconst App = () => {\n\n  // we will use setstate create a state 'All' with initial value an empty array\n   const [All , setAll]  = useState([])\n\n\n// Get \n  /*\n    - we will create a function and get the data inside it using a way from many ways\n      (async/await) - (then/catch) - (fetch) ...\n    - we will update state using setAll  and instead of empty array it will equel res \n    -do not forget to call the function at the end \n  */\nconst GetAllBooks =() => {\n      const getContacts = async () => {\n      const res = await BooksAPI.getAll();\n      setAll(res);\n    }\n    getContacts()\n\n  // BooksAPI.getAll().then((res) => {\n  //   setAll( res );\n  // });\n}\n\n  /*\n    - i wanna say after the component render and every thing is okay \n      then call the function which we create it in line  36  \n    - if we were using class based componet that will be ComponentDidMount/lifecycle\n    - but now in function component and with Hooks it called useEffect\n    - we should use empty array to prevent infinite loop\n  */\nuseEffect(()=>{\n  GetAllBooks()\n},[])\n\n\n\n // Update \n    // - i will update the data which i got it in line 36 using BooksAPI.update for update \n const Update = (book, shelf) => {\n  BooksAPI.update(book, shelf).then(updateBooks => {\n    GetAllBooks();\n  })\n }\n\n  // we do not need to write a render() because it is a function component\n  return (\n    /*\n      - because we write a jsx we should wrap  all elements inside one parent\n      - before using Routes and Route we should wrap App.js in BrowserRourer which is in index.js file\n      - path=\"/\" refers to home  and path=\"/Search\" refers to search component\n      - element refers to component which will appear on screen when the path match with its url\n      -inside every component should i pass state and books after updated(Update) as props and i will receive it inside component page\n      */\n    <div className=\"app\">\n      <Routes>\n        <Route path=\"/\" element={<Main All={All}  Update={Update}/>} />\n        <Route path=\"/Search\" element={<Search  All={All} Update={Update}/>} />\n      </Routes>\n    </div>\n  );\n}\n\n\n\n\n// Do not forget export App by using export default \n// and import it in index.js inside root element\nexport default App \n"]},"metadata":{},"sourceType":"module"}